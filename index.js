const fs = require("fs").promises; // Use the Promise-based version of fs
const path = require("path");
const directoryPath = "./Keep";

class Keep2Anki {
  constructor() {
    this.cards = [];
    this.processDirectory(directoryPath).then(() => {
      // console.log(this.cards); // Log cards after they've been processed
      this.writeCardsToCSV();
    });
  }

  writeCardsToCSV() {
    const csv = this.cards.map((card) => {
      return `${card.title}\t${card.content}`;
    });
    fs.writeFile("output.csv", csv.join("\n"), "utf8");
  }

  processData(jsonData) {
    // skip if isArchived is true
    if (jsonData.isArchived) {
      return;
    }
    // skip if not dictionary content
    if (
      !jsonData.textContent ||
      !jsonData.textContent.includes(
        "Text generated by the application English Dictionary"
      )
    ) {
      return;
    }
    // console.log(jsonData.title);
    const title = jsonData.title;
    let content = jsonData.textContent;
    // replace all occurences of title in content with 3 black blocks
    content = content.replace(new RegExp(title, "g"), "■■■");
    content = content.replace(
      /^(Etymology|Pronunciation)\n(?:\n)?((?:.+\n?)+)\n/gm,
      ""
    );
    // console.log(content);
    this.cards.push({ content, title });
  }
  async processFile(file) {
    if (path.extname(file) === ".json") {
      const filePath = path.join(directoryPath, file);
      try {
        const data = await fs.readFile(filePath, "utf8");
        const jsonData = JSON.parse(data);
        this.processData(jsonData);
      } catch (error) {
        console.error("Error reading or parsing file:", error);
      }
    }
  }

  async processDirectory(directoryPath) {
    try {
      const files = await fs.readdir(directoryPath);
      for (let file of files) {
        await this.processFile(file); // Wait for each file to be processed
      }
    } catch (err) {
      console.error("Error reading directory:", err);
    }
  }
}

new Keep2Anki();
